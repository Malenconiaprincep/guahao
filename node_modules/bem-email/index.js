'use strict';

let crypto = require('bem-crypto');
let rid = require('bem-rid');
let thunkify = require('thunkify');
let request = thunkify(require('request'));

let cache = {};

let apiBase = 'https://dm.aliyuncs.com';

let commonParams = {
  Format: 'json',
  Version: '2015-11-23',
  SignatureMethod: 'HMAC-SHA1',
  SignatureVersion: '1.0',
  AccessKeyId: '',
  AccountName: ''
};

class BemEmail {
  constructor(config) {
    this.AccountName = config.AccountName;
    this.AccessKeySecret = config.AccessKeySecret;
    this.AccessKeyId = config.AccessKeyId;
  }

  sign(params) {
    let keys = Object.keys(params);
    keys.sort();
    let kvPairs = keys.map((key) => {
      return `${key}=${encodeURIComponent(params[key])}`
    });
    let querystring = kvPairs.join('&');
    let stringToSign = `POST&%2F&${encodeURIComponent(querystring)}`;
    let sha1String = crypto.sha1.base64(stringToSign, this.AccessKeySecret + '&');
    let signature = (sha1String);
    return signature;
  }

  * sendMail(options) {
    let params = {
      Action: 'SingleSendMail',
      ReplyToAddress: options.ReplyToAddress ? 'true' : 'false',
      AddressType: options.AddressType || 0,
      ToAddress: options.ToAddress,
      Subject: options.Subject,
      // HtmlBody: options.HtmlBody || '',
      TextBody: options.TextBody || '',
      Timestamp: new Date().toISOString(),
      SignatureNonce: rid()
    };
    Object.keys(commonParams).forEach((key) => {
      commonParams[key] = commonParams[key] || this[key];
    });
    Object.assign(params, commonParams);
    let signature = this.sign(params);
    params.Signature = signature;
    let result = yield request({
      url: apiBase,
      method: 'POST',
      form: params
    });
    result = JSON.parse(result[1]);
    return result;
  }

}

module.exports = BemEmail;
